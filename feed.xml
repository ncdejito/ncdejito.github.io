<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ncdejito.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ncdejito.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-25T09:40:39+00:00</updated><id>https://ncdejito.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Autonomy from scratch</title><link href="https://ncdejito.github.io/blog/2024/autonomy-from-scratch/" rel="alternate" type="text/html" title="Autonomy from scratch"/><published>2024-07-15T15:09:00+00:00</published><updated>2024-07-15T15:09:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/autonomy-from-scratch</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/autonomy-from-scratch/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in <a href="https://github.com/planetjekyll/quickrefs/blob/master/FAQ.md#q-how-can-i-get-backtick-fenced-code-blocks-eg--working-inside-lists-with-kramdown">this FAQ</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">
   1.</span> Like this:<span class="sb">

      ```c
      printf("Hello, World!");
      ```

</span><span class="p">   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li> <p>We can put fenced code blocks inside nested bullets, too.</p> <ol> <li> <p>Like this:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li> <p>The key is to indent your fenced block in the same line as the first character of the line.</p> </li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="tradeoffs"/><category term="swe"/><summary type="html"><![CDATA[Opinionated guide on building from scratch]]></summary></entry><entry><title type="html">Evaluating physical workflows with VLMs</title><link href="https://ncdejito.github.io/blog/2024/evaluating-physical-workflows-with-VLMs/" rel="alternate" type="text/html" title="Evaluating physical workflows with VLMs"/><published>2024-07-15T15:09:00+00:00</published><updated>2024-07-15T15:09:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/evaluating-physical-workflows-with-VLMs</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/evaluating-physical-workflows-with-VLMs/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in <a href="https://github.com/planetjekyll/quickrefs/blob/master/FAQ.md#q-how-can-i-get-backtick-fenced-code-blocks-eg--working-inside-lists-with-kramdown">this FAQ</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">
   1.</span> Like this:<span class="sb">

      ```c
      printf("Hello, World!");
      ```

</span><span class="p">   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li> <p>We can put fenced code blocks inside nested bullets, too.</p> <ol> <li> <p>Like this:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li> <p>The key is to indent your fenced block in the same line as the first character of the line.</p> </li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="case-study"/><category term="ml"/><category term="data"/><summary type="html"><![CDATA[Assessing the quality of a factory supply chain with LLM-as-Judge]]></summary></entry><entry><title type="html">Album Recommendation using Cosine Similarity</title><link href="https://ncdejito.github.io/blog/2024/albums/" rel="alternate" type="text/html" title="Album Recommendation using Cosine Similarity"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/albums</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/albums/"><![CDATA[<h4 id="goal">Goal</h4> <p>Suggest albums similar to My Beautiful Dark Twisted Fantasy</p> <h4 id="data">Data</h4> <p>Allmusic.com moods</p> <h4 id="insights">Insights</h4> <p>List of albums to try</p> <p><img class="img-fluid" src="../img/ncdejito/albums.png"/></p> <p>I created a recommendation algorithm for music albums based on moods from Allmusic.com. Each mood was represented as an adjective like Ambitious, Flashy, Bombastic. Each column is a mood, while each row is an album. Each mood is one-hot encoded. To find an album similar to the album you like,</p> <ol> <li>Get moods for album you like</li> <li>Encode moods as 1, 0 valued columns.</li> <li>Find similar albums using cosine similarity and one-hot encoded albums. Result would be something similar to the image above, where the first row is the album I put as input.</li> </ol>]]></content><author><name></name></author><category term="case-study"/><category term="swe"/><summary type="html"><![CDATA[Album Recommendation using Cosine Similarity]]></summary></entry><entry><title type="html">The Psycellium</title><link href="https://ncdejito.github.io/blog/2024/psycellium/" rel="alternate" type="text/html" title="The Psycellium"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/psycellium</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/psycellium/"><![CDATA[<h4 id="goal">Goal</h4> <p>Assess the level of interaction between characters</p> <h4 id="data">Data</h4> <p>Sense8 season 1 subtitles</p> <h4 id="insights">Insights</h4> <ul> <li>Which “sensates” interacted the most with whom;</li> <li>Will interacted with the most people in the group;</li> <li>Nomi is connected to a lot of influential people;</li> <li>Wolfgang is the most distant character.</li> </ul> <p>I tried replicating the <a href="https://www.macalester.edu/~abeverid/thrones.html">network of thrones analysis</a> because aside from being informative, it also looked so cool. I adapted the analysis to one of my favorite tv series, Sense8, and here’s what the network looks like.</p> <p><img class="img-fluid" src="../img/ncdejito/Capture.PNG"/> Figure 1. Network graph of Sense8 characters</p> <p>The connections represent how often the characters interacted in the series. The size of the name measures how important that character is, based on how many other characters he/she interacted with. The distances between nodes represent the distance of each character to every other character, as measured by interactions.</p> <p>The graph confirms that Will is the most important character in the story so far, the one with the “savior behavior”. All sensates are labelled important by the size of their names, and the closeness of each sensate to another is shown. The closest pairs are Nomi-Lito, Wolfgang-Kala, and Sun-Capheus, which is confirmed from watching the show.</p> <p>It is interesting to note that Nomi is closer to Will than Riley, but then again the measure is the number of interactions. Perhaps Will’s interaction with Riley was infrequent but intimate moments, while Nomi interacted more with strategizing and coordinating with Will. Also, Felix looks to be of the same importance as other sensates, which I haven’t discovered why yet.</p> <p>Within the cluster, which are the closest sensates? <img class="img-fluid" src="../img/ncdejito/sensates1.PNG"/></p> <p>Figure 2. Network graph of main characters</p> <p>As expected, the closest sensates are Will and Riley. It is interesting to note though, that the network algorithm calculated Will and Nomi to be closer in the complete network graph, which means that Will and Nomi’s world is closer (i.e. Will interacts with more people in Nomi’s circle than Riley’s, and vice versa). The only person Riley interacts with in Will’s world is Diego, while in Nomi’s world, Will interacted with nurses (when he saved Nomi from lobotomy), Neets (whenever Neets Nomi and Will are strategizing), and Jonas (strategic meetings). It seems like Capheus-Nomi, Riley-Nomi, and Sun-Kala should spend more time together, hopefully the creators find more ways to get them together.</p> <p>Of the outside-cluster people closest to the sensates, which relationships are the strongest? <img class="img-fluid" src="../img/ncdejito/sensateswithbestbuds1.PNG"/> Figure 3. Network graph of main characters with best buds</p> <p>Unexpectedly, Lito-Daniela seems to be the closest pair as measured by interactions. This would probably be caused by when Lito dated Dani, and when he saved Dani from Joaquin. Kala-Rajan seems to be the weakest pairing, which is understandable considering that Kala is not as open to Rajan as the other sensates are with their partners (except Lito, which is yet to disclose to Hernando what is happening to him as a Homo sensorium).</p> <p>Diving deeper, here are also the centrality measures for each recurring character.</p> <p><img class="img-fluid" src="../img/ncdejito/sense8-metrics.PNG"/> Figure 4. Measures of centrality for recurring characters</p> <p>Will, being the central character, is number 1 for 3 centrality measures. Nomi is the most connected to the most influential people, as evidenced by her eigencentrality. From here we can see that Wolfgang is the most distant character from the group, with the largest closeness centrality. Sun has the highest betweenness centrality, which means she often appears when two or more characters are in a pinch, which attests to how useful and how badass she is in the show.</p>]]></content><author><name></name></author><category term="deployment"/><category term="swe"/><summary type="html"><![CDATA[The Psycellium]]></summary></entry><entry><title type="html">Vegvisir - 2D Map from LiDAR</title><link href="https://ncdejito.github.io/blog/2024/lidar-map/" rel="alternate" type="text/html" title="Vegvisir - 2D Map from LiDAR"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/lidar-map</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/lidar-map/"><![CDATA[<p><a href="https://github.com/ncdejito/vegvisir">Code</a> <a href="https://www.linkedin.com/posts/niccolo-dejito-99060365_i-was-able-to-make-a-2d-map-from-just-a-lidar-activity-6991652049457201152-a1Nj?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAAA3LMbwBL0fl-duGsr6F6kypgy-g-ik7Whc">Post</a></p> <p>I was able to make a 2D map from just a LIDAR! This is exciting to me because having a 2D map enables autonomous navigation with the ROS2 Nav2 package.</p>]]></content><author><name></name></author><category term="deployment"/><category term="swe"/><summary type="html"><![CDATA[2D maps just from LIDAR]]></summary></entry><entry><title type="html">Python and Arduino via Smartphones</title><link href="https://ncdejito.github.io/blog/2024/android-arduino/" rel="alternate" type="text/html" title="Python and Arduino via Smartphones"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/android-arduino</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/android-arduino/"><![CDATA[<h4 id="summary">Summary</h4> <p>Run python code on a smartphone to see LED turn on.</p> <p><a href="https://github.com/ncdejito/android-arduino/blob/main/assets/android-arduino-1.gif?raw=true">DEMO</a></p> <h4 id="motivation">Motivation</h4> <ul> <li>Wirelessly run python programs that control Arduino</li> <li>Control android without rooting</li> <li>Access sensors available in smartphone i.e. camera, GPS</li> </ul> <h4 id="usage">Usage</h4> <p>Follow <code class="language-plaintext highlighter-rouge">Setup</code> instructions then run the following on python ssh terminal to control LED.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tn.write('1'.encode('ascii')) # on
tn.write('0'.encode('ascii')) # off
</code></pre></div></div> <h4 id="requirements">Requirements</h4> <h5 id="hardware">Hardware</h5> <ol> <li>Android phone (tested on 7.0 and 8.1)</li> <li>Arduino UNO</li> <li>LED</li> <li>USB Cable Type A/B</li> <li>OTG cable USB to micro-USB</li> </ol> <h5 id="software">Software</h5> <ol> <li>Arduino IDE</li> <li>Termux (F-Droid version)</li> <li>Server Bridge X</li> </ol> <h4 id="setup">Setup</h4> <p>All code is available on <a href="https://github.com/ncdejito/android-arduino">github</a></p> <ol> <li>On the PC, install Arduino IDE.</li> <li>Connect Arduino UNO to PC using USB Cable Type A/B.</li> <li> <p>Upload sketch.ino to your Ardunio board using the Upload button in the Arduino IDE.</p> </li> <li>On the android smartphone, install Server Bridge X and Termux via F-Droid marketplace.</li> <li>Open Android app Server Bridge X.</li> <li>Attach OTG cable USB to micro-USB to Arduino. Press ‘ok’ when asked to Allow the app ServerBridgeX to access the USB device.</li> <li> <p>Press play in Server Bridge X.</p> </li> <li>Open Android app Termux.</li> <li>Connect smartphone to same network as PC.</li> <li>On Termux, install SSH tools and python via commands in <code class="language-plaintext highlighter-rouge">script.sh</code>.</li> <li> <p>On the PC command line, access the smartphone terminal using SSH.</p> </li> <li>On PC command line, run Python.</li> <li>On Python, run <code class="language-plaintext highlighter-rouge">send.py</code> commands. LED should turn on/off based on the command sent (1 or 0).</li> </ol> <h4 id="references">References</h4> <ul> <li><a href="https://www.youtube.com/watch?v=broLBoU5rZ4">SSH to any Android Phone</a></li> <li><a href="https://www.danbp.org/p/en/node/140">Control Arduino via USB OTG from Android</a></li> <li><a href="https://play.google.com/store/apps/details?id=com.cidtepole.serverbridge&amp;hl=en">Server Bridge X</a></li> <li><a href="https://f-droid.org/en/packages/com.termux/">Termux</a></li> </ul>]]></content><author><name></name></author><category term="deployment"/><category term="swe"/><summary type="html"><![CDATA[Python and Arduino via Smartphones]]></summary></entry><entry><title type="html">Simulate robot navigation inside Docker</title><link href="https://ncdejito.github.io/blog/2024/nav2-docker/" rel="alternate" type="text/html" title="Simulate robot navigation inside Docker"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/nav2-docker</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/nav2-docker/"><![CDATA[<h4 id="summary">Summary</h4> <p>Run Nav2 quickstart inside Docker</p> <p><img class="img-fluid" src="../img/ncdejito/nav2_docker.png"/></p> <h4 id="why">Why</h4> <ul> <li>Reduce setup steps by getting ROS pre-installed</li> <li>Develop navigation applications in the safety of an isolated Docker environment</li> <li>Encourage development with ease of use</li> </ul> <h4 id="specs">Specs</h4> <ul> <li>Nav2</li> <li>ROS galactic Geochelone [switched from Humble for stability]</li> <li>tested on Ubuntu 20.04</li> </ul> <h4 id="steps">Steps</h4> <ol> <li>Get docker image. Test that it’s working with <a href="https://docs.ros.org/en/galactic/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.html">this example</a> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull osrf/ros:galactic-desktop
</code></pre></div> </div> </li> <li>Connect docker to linux display <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export DISPLAY=:0.0
xhost +local:docker
</code></pre></div> </div> </li> <li>Run docker <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it --net=host --device /dev/dri/ -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority:ro osrf/ros:galactic-desktop
</code></pre></div> </div> </li> <li>Install <a href="https://navigation.ros.org/getting_started/index.html">nav2</a> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update
apt install ros-galactic-navigation2 -y
apt install ros-galactic-nav2-bringup -y
apt install ros-galactic-turtlebot3* -y
</code></pre></div> </div> </li> <li>Load ROS environment variables <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source /opt/ros/galactic/setup.bash
export TURTLEBOT3_MODEL=waffle
export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:/opt/ros/galactic/share/turtlebot3_gazebo/models
</code></pre></div> </div> </li> <li>Run navigation example <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ros2 launch nav2_bringup tb3_simulation_launch.py headless:=False
</code></pre></div> </div> </li> <li>[Optional] Add workspace tools <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install vim -y
apt install tmux -y
</code></pre></div> </div> </li> <li>Save progress to workspace <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># in a separate terminal
docker ps
docker commit 3204cbea0e30 osrf/ros:galactic-desktop-nav2
</code></pre></div> </div> </li> </ol> <h4 id="fixes-for-common-errors">Fixes for common errors</h4> <p><code class="language-plaintext highlighter-rouge">[ERROR] [rviz2-5]: process has died [pid 75, exit code -11, cmd '/opt/ros/galactic/lib/rviz2/rviz2 -d /opt/ros/galactic/share/nav2_bringup/rviz/nav2_default_view.rviz --ros-args']</code></p> <ul> <li>Run the following: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export DISPLAY=:0.0
xhost +local:docker
</code></pre></div> </div> <p><code class="language-plaintext highlighter-rouge">Error: Non-unique names detected in type collision in &lt;link name='camera_link'&gt;</code></p> </li> <li>reinstall turtlebot packages <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt remove --purge ros-galactic-turtlebot3*
apt install ros-galactic-turtlebot3* -y
</code></pre></div> </div> </li> </ul> <h4 id="references">References</h4> <p>[1] <a href="https://robofoundry.medium.com/trying-out-ros2-galactic-hawksbill-using-docker-4490bc88c926">Trying out ROS2 galactic Hawksbill using Docker</a></p>]]></content><author><name></name></author><category term="deployment"/><category term="swe"/><summary type="html"><![CDATA[Simulate robot navigation inside Docker]]></summary></entry><entry><title type="html">Conversation Prompts App</title><link href="https://ncdejito.github.io/blog/2024/conversation-prompts-app/" rel="alternate" type="text/html" title="Conversation Prompts App"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/conversation-prompts-app</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/conversation-prompts-app/"><![CDATA[<p><a href="https://ncdejito.github.io/conversation-prompts/">App</a></p> <h4 id="summary">Summary</h4> <p>Fill the silence with a conversation prompt for every occasion!</p> <h4 id="sources-for-questions">Sources for Questions</h4> <ul> <li><a href="https://www.themuse.com/advice/48-questions-thatll-make-awkward-small-talk-so-much-easier">Work</a></li> <li><a href="https://www.reddit.com/r/socialskills/comments/9m3q82/anyone_who_needs_conversation_starters_this/">Friends</a></li> <li><a href="https://www.elitedaily.com/dating/questions-to-ask-on-bumble">Date</a></li> </ul>]]></content><author><name></name></author><category term="case-study"/><category term="swe"/><summary type="html"><![CDATA[Conversation Prompts App]]></summary></entry><entry><title type="html">Connect IR Sensor to ROS2</title><link href="https://ncdejito.github.io/blog/2024/ir-sensor-ros2/" rel="alternate" type="text/html" title="Connect IR Sensor to ROS2"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://ncdejito.github.io/blog/2024/ir-sensor-ros2</id><content type="html" xml:base="https://ncdejito.github.io/blog/2024/ir-sensor-ros2/"><![CDATA[<h4 id="summary">Summary</h4> <p>Connect IR Sensor to ROS2</p> <ul> <li><a href="https://youtu.be/c4Xirzo_jJk">Demo</a></li> <li><a href="https://github.com/ncdejito/ir-sensor-ros2">Code</a></li> </ul> <h4 id="why">Why</h4> <ul> <li>Outdated documentation of how to do it - rosserial is ROS1, ros2arduino was updated 2 years ago</li> <li>Approachable python interface vs more complex frameworks - micro-ros, arduino-cli, johnny-five requires nodejs install</li> <li>No need to code in Arduino C - enabled by the Firmata protocol</li> </ul> <h4 id="software">Software</h4> <ul> <li>ROS2 Humble</li> <li>pyFirmata</li> <li>Arduino IDE</li> </ul> <h4 id="hardware">Hardware</h4> <ul> <li><a href="https://www.sparkfun.com/products/12728">Sharp IR Sensor</a></li> <li>Arduino UNO</li> </ul> <h4 id="steps">Steps:</h4> <ol> <li> <p>Wire IR sensor using <a href="http://wiki.ros.org/rosserial_arduino/Tutorials/IR%20Ranger">this diagram</a></p> </li> <li> <p>On the arduino IDE, upload <code class="language-plaintext highlighter-rouge">File &gt; Examples &gt; Firmata &gt; StandardFirmata</code> to the Arduino Uno board (following <a href="https://roboticsbackend.com/arduino-standard-firmata-tutorial/">this tutorial</a>)</p> </li> <li> <p>Get device location from the lower right part of Arduino IDE, for me it was <code class="language-plaintext highlighter-rouge">/dev/ttyACM0</code></p> </li> <li>Install pyfirmata <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install python3-pip
python3 -m pip install pyfirmata
python3
</code></pre></div> </div> </li> <li> <p>Modify device location in the script <code class="language-plaintext highlighter-rouge">ir_sensor_pyfirmata.py</code>.</p> </li> <li> <p>Test if the range readings are read by pyfirmata by running the script.</p> </li> <li>Test message publishing and subscribing using <a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.html#">this tutorial</a> and replacing the publisher and subscriber functions with the scripts in this repo. <ul> <li><code class="language-plaintext highlighter-rouge">publisher_member_function.py</code></li> <li><code class="language-plaintext highlighter-rouge">subscriber_member_function.py</code></li> </ul> </li> </ol> <p>Bonus:</p> <ul> <li>If <a href="https://ncdejito.github.io/nav2-docker/">running inside docker</a>, connect docker container with Arduino device by adding a <code class="language-plaintext highlighter-rouge">--device</code> flag</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it --net=host --device /dev/dri/ --device /dev/ttyACM0 -e DISPLAY=$DISPLAY -v $HOME/.Xauthority:/root/.Xauthority:ro osrf/ros:humble-desktop-nav2
</code></pre></div></div> <h4 id="references">References</h4> <ul> <li><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.html#">ROS2 Humble Docs: Writing a simple py publisher and subscriber</a></li> <li><a href="http://wiki.ros.org/rosserial_arduino/Tutorials/IR%20Ranger">ROSSerial: Arduino + IR Sensor</a></li> <li><a href="https://roboticsbackend.com/arduino-standard-firmata-tutorial/">Robotics Backend: Arduino Standard Firmata Tutorial</a></li> <li><a href="https://ncdejito.github.io/nav2-docker/">Simulate robot navigation inside Docker</a></li> </ul>]]></content><author><name></name></author><category term="deployment"/><category term="swe"/><summary type="html"><![CDATA[Connect IR Sensor to ROS2]]></summary></entry><entry><title type="html">Pingpong Bot</title><link href="https://ncdejito.github.io/blog/2023/pingpong-bot/" rel="alternate" type="text/html" title="Pingpong Bot"/><published>2023-01-27T11:46:00+00:00</published><updated>2023-01-27T11:46:00+00:00</updated><id>https://ncdejito.github.io/blog/2023/pingpong-bot</id><content type="html" xml:base="https://ncdejito.github.io/blog/2023/pingpong-bot/"><![CDATA[<h4 id="summary">Summary</h4> <p>Prototyped Pingpong shooter bot described in <a href="https://hlung.medium.com/how-to-make-a-ping-pong-shooter-robot-dafb46ec255e">[1]</a></p> <p><img class="img-fluid" src="assets/img/ncdejito/pingpong_vid.gif"/></p> <h4 id="tools-used">Tools used</h4> <ul> <li>Hand drill</li> <li>Saw</li> <li>Screw driver - phillips and flat head</li> <li>Glue gun</li> <li>Knife</li> <li>Scissors</li> </ul> <h4 id="parts-replaced">Parts Replaced</h4> <p>Complete list in [1], unavailable parts in the PH listed down here, along with replacements</p> <ul> <li>Fast motor (Launcher) -&gt; 48V Motor from Electric Grass Cutter <a href="https://shopee.ph/Jaina-36V-48V-Grass-Cutter-Trimmer-Lawn-Mower-Rechargeable-Portable-with-Wheel-Battery-Blade-12V-24V-i.789394410.18209594301?sp_atk=25c26710-eda8-417f-8cd7-c9a3c7893213&amp;xptdk=25c26710-eda8-417f-8cd7-c9a3c7893213">[Shopee]</a></li> <li>Slow motor (Feeder) -&gt; DC TT Gear Geared Motor 6V <a href="https://shopee.ph/DC-TT-Gear-Geared-Motor-6V-%E2%80%93-Yellow-i.18252381.1670638604?sp_atk=6c596fa5-30b8-4df3-9f8a-7f7cab872033&amp;xptdk=6c596fa5-30b8-4df3-9f8a-7f7cab872033">[Shopee]</a></li> <li>Steel hanger strap -&gt; Drilling holes in the pipe, chopsticks and electrical tape 😅</li> <li>Added an on/off switch for the feeder motor</li> </ul> <p><img class="img-fluid" src="assets/img/ncdejito/pingpong_back.jfif"/> <img class="img-fluid" src="assets/img/ncdejito/pingpong_side.jfif"/> Working prototype</p> <p><img class="img-fluid" src="assets/img/ncdejito/pingpong_early.jfif"/> Prototyping chopsticks</p> <h4 id="references">References</h4> <p>[1] <a href="https://hlung.medium.com/how-to-make-a-ping-pong-shooter-robot-dafb46ec255e">How to make a ping pong shooter robot by Thongchai Kolyutsakul</a></p>]]></content><author><name></name></author><category term="case-study"/><category term="swe"/><summary type="html"><![CDATA[Pingpong Bot]]></summary></entry></feed>